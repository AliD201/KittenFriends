{"version":3,"sources":["Components/Card.js","Components/CardList.js","robots.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App2.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","console","log","cardComponent","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","len","length","x","push","toString","App","useState","CsearchField","setSetSearchField","filtering","filter","robot","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.acbf9836.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = (props) => {\r\n  const {name , email , id} = props;\r\n    return (\r\n        <div className=\"bg-light-red dib br3 pa4 ma2 grow bw2 shadow-5 tc\">\r\n        <img src={`https://robohash.org/${id}?set=set4&size=200x200`} alt=\"profile\"/>\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p> {email}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = (props) => {\r\n  //Error trigger\r\n  // throw new Error('NOOOOO!')\r\n  console.log(props);\r\n  const robots = props.robots;\r\n  const cardComponent = robots.map((user ,i) =>{\r\n    return (<Card key={i} id ={user.id} name={user.name} email={user.email}/>)\r\n  })\r\n\r\n\r\n  return (\r\n    <div>\r\n    {cardComponent}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default CardList\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from'react';\r\nconst SearchBox = (props) =>{\r\n  const searchChange = props.searchChange;\r\n  return(\r\n    <div className=\"pa2\">\r\n    <input\r\n      className=\"bg-lightest-blue ba b--green\"\r\n      type=\"search\"\r\n      placeholder=\"Search the List\"\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  return (\r\n    <div style={{overflowY:'scroll', border:'1px solid black', height:'43rem'}}>\r\n    {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {  Fragment }  from 'react';\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // Display fallback UI\r\n    this.setState({ hasError: true });\r\n    }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return (<Fragment>\r\n        <h1>Something went wrong.</h1>\r\n        <p> {this.info} </p>\r\n        </Fragment>\r\n      )\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, {  useState }  from 'react';\r\nimport CardList from '../Components/CardList'\r\nimport {robots} from \"../robots\"\r\nimport SearchBox from '../Components/SearchBox'\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundry'\r\n\r\nconst len = robots.length;\r\nconsole.log(len);\r\nfor (var i=0; i<=len*200;i++){\r\n  var x = i*10;\r\n  robots.push({\r\n    id: 10,\r\n    name: x.toString(),\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  })\r\n}\r\n\r\nconst App = () =>{\r\n  // const [Crobots, setRobots] = useState(robots);\r\n  const [CsearchField, setSetSearchField] = useState('');\r\n  // const [state, setState] = useState({Crobots:robots,CsearchField:''});\r\n\r\n  const onSearchChange = (event)=>{\r\n    setSetSearchField( event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n  const filtering = robots.filter(robot =>{\r\n  return robot.name.toLowerCase().includes(CsearchField)\r\n})\r\n  console.log(filtering);\r\n  return (\r\n    <div className=\"tc\">\r\n    <h1 className=\"f1\">KITTENFRIENDS</h1>\r\n    <SearchBox searchChange={onSearchChange} />\r\n    <Scroll>\r\n    <ErrorBoundary>\r\n    < CardList robots={filtering}/>\r\n    </ErrorBoundary>\r\n    </Scroll>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App2';\n// import Comp from './Component1'\n// import Card from './Card'\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}