{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App3_redux.js","Actions.js","constans.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","console","log","cardComponent","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","padding","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","err","useEffect","filtering","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","initialState","initialStateRequest","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oOAgBeA,G,MAbF,SAACC,GAAW,IAChBC,EAAqBD,EAArBC,KAAOC,EAAcF,EAAdE,MAAQC,EAAMH,EAANG,GACpB,OACI,yBAAKC,UAAU,qDACf,yBAAKC,IAAG,+BAA0BF,EAA1B,0BAAsDG,IAAI,YAClE,6BACE,4BAAKL,GACL,+BAAKC,OCmBAK,EAxBE,SAACP,GAGhBQ,QAAQC,IAAIT,GACZ,IACMU,EADSV,EAAMW,OACQC,KAAI,SAACC,EAAMC,GAEtC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAKU,EAAKV,GAAIF,KAAMY,EAAKZ,KAAMC,MAAOW,EAAKX,WAInE,OACE,6BACCQ,ICJUM,EAbG,SAAChB,GACjB,IAAMiB,EAAejB,EAAMiB,aAC3B,OACE,yBAAKb,UAAU,OACf,2BACEA,UAAU,+BACVc,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCCDI,G,MARA,SAACrB,GACd,OACE,yBAAKsB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,QAASC,QAAQ,SAClF1B,EAAM2B,Y,+BCsBIC,E,kDAvBb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACD6B,MAAQ,CAAEC,UAAU,GAFR,E,8DAKDC,EAAOC,GAEvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SAEL,kBAAC,WAAD,KACN,qDACA,+BAAKG,KAAKD,KAAV,MAIGC,KAAKjC,MAAM2B,a,GApBMQ,IAAMC,W,OC2EnBC,eAnES,SAACR,GAEvB,MAAM,CACFS,YAAYT,EAAMU,aAAaD,YAC/B3B,OAASkB,EAAMW,cAAc7B,OAC7B8B,UAAWZ,EAAMW,cAAcC,UAC/BV,MAAOF,EAAMW,cAAcT,UAIN,SAACW,GAC1B,MAAO,CACLC,eAAgB,SAAEC,GAAF,OAAaF,ECfQ,CACvCxB,KCTiC,sBDUjC2B,QDauDD,EAAME,OAAOC,SAClEC,gBAAiB,kBAAMN,GCXQ,SAACA,GAClCA,EAAS,CAACxB,KCZyB,2BDanC+B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIX,EAAS,CAACxB,KCdW,yBDckB2B,QAAQQ,OAC5DC,OAAM,SAAAC,GAAG,OAAIb,EAAS,CAACxB,KCdQ,sBDckB2B,QAAQU,cD4D7ClB,EAlCH,SAACrC,GAWXwD,qBAAU,WAERxD,EAAMgD,oBACL,IACH,IACMS,EADSzD,EAAMW,OACI+C,QAAO,SAAAC,GAChC,OAAOA,EAAM1D,KAAK2D,cAAcC,SAAS7D,EAAMsC,gBAG/C,OACE,yBAAKlC,UAAU,MACf,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWa,aAAcjB,EAAM2C,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAE,EAAF,CAAWhC,OAAQ8C,UG1DHK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCXAC,EAAe,CACnB7B,YAAa,IAET8B,EAAsB,CAC1B3B,WAAW,EACX9B,OAAO,GACPoB,MAAM,I,gBCIFsC,EAAcC,YAAgB,CAAC/B,aDFT,WAAqC,IAApCV,EAAmC,uDAA3BsC,EAAcI,EAAa,uDAAN,GAC1D,OAAOA,EAAOrD,MACZ,IFjBiC,sBEkB/B,OAAOsD,OAAOC,OAAO,GAAG5C,EAAO,CAACS,YAAYiC,EAAO1B,UACrD,QACA,OAAOhB,ICHyCW,cDMrB,WAA4C,IAA3CX,EAA0C,uDAAlCuC,EAAqBG,EAAa,uDAAL,GACjE,OAAOA,EAAOrD,MACZ,IFvBiC,yBEwB/B,OAAOsD,OAAOC,OAAO,GAAG5C,EAAO,CAACY,WAAU,IAC5C,IFxBiC,yBEyB/B,OAAO+B,OAAOC,OAAO,GAAG5C,EAAO,CAAClB,OAAO4D,EAAO1B,QAASJ,WAAU,IACnE,IFzB8B,sBE0B5B,OAAQ+B,OAAOC,OAAO,GAAG5C,EAAO,CAACE,MAAMwC,EAAO1B,QAASJ,WAAU,IACnE,QACA,OAAOZ,MCdL6C,EAASC,yBAETC,EAAQC,YAAYR,EAAaS,YAAgBC,IAAgBL,IAGvEM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAvB,GACLvB,QAAQuB,MAAMA,EAAM2D,c","file":"static/js/main.039861b8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = (props) => {\r\n  const {name , email , id} = props;\r\n    return (\r\n        <div className=\"bg-light-red dib br3 pa4 ma2 grow bw2 shadow-5 tc\">\r\n        <img src={`https://robohash.org/${id}?set=set4&size=200x200`} alt=\"profile\"/>\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p> {email}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n// import Card from './AnimeCard'\r\n// import Card from './AnimeCardSideWay'\r\n\r\nconst CardList = (props) => {\r\n  //Error trigger\r\n  // throw new Error('NOOOOO!')\r\n  console.log(props);\r\n  const robots = props.robots;\r\n  const cardComponent = robots.map((user ,i) =>{\r\n    // return (<Card key={i} id ={user.id} name={user.name} email={user.email}/>)\r\n    return (<Card key={i} id ={user.id} name={user.name} email={user.email}/>)\r\n  })\r\n\r\n\r\n  return (\r\n    <div>\r\n    {cardComponent}\r\n    </div>\r\n  )\r\n  // return (\r\n  //   <div>\r\n  //   <Card/>\r\n  //   </div>\r\n  // )\r\n\r\n}\r\n\r\nexport default CardList\r\n","import React from'react';\r\nconst SearchBox = (props) =>{\r\n  const searchChange = props.searchChange;\r\n  return(\r\n    <div className=\"pa2\">\r\n    <input\r\n      className=\"bg-lightest-blue ba b--green\"\r\n      type=\"search\"\r\n      placeholder=\"Search the List\"\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  return (\r\n    <div style={{overflowY:'scroll', border:'1px solid black', height:'45rem', padding:'1rem'}}>\r\n    {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {  Fragment }  from 'react';\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // Display fallback UI\r\n    this.setState({ hasError: true });\r\n    }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return (<Fragment>\r\n        <h1>Something went wrong.</h1>\r\n        <p> {this.info} </p>\r\n        </Fragment>\r\n      )\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, {useEffect} from 'react';\r\nimport CardList from '../Components/CardList'\r\n// import {robots} from \"../robots\"\r\nimport SearchBox from '../Components/SearchBox'\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundry'\r\n// redux\r\nimport { connect } from 'react-redux'\r\nimport {setsearchField, requestRobots} from './../Actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n  // console.log(state.searchField);\r\n  return{\r\n      searchField:state.searchRobots.searchField,\r\n      robots : state.requestRobots.robots,\r\n      isPending: state.requestRobots.isPending,\r\n      error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onSearchChange: ( event ) => dispatch(setsearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n// .............\r\n// const len = robots.length;\r\n// // console.log(len);\r\n// for (var i=0; i<=len*200;i++){\r\n//   var x = i*10;\r\n//   robots.push({\r\n//     id: 10,\r\n//     name: x.toString(),\r\n//     username: 'Bret',\r\n//     email: 'Sincere@april.biz'\r\n//   })\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nconst App = (props) =>{\r\n  // const [Crobots, setRobots] = useState(robots);\r\n  // THE CORRECT ONE DOWN OF THIS LINE\r\n  // const [CsearchField, setSetSearchField] = useState('');\r\n  // const [state, setState] = useState({Crobots:robots,CsearchField:''});\r\n  // console.log(props.store.getState());\r\n  // const onSearchChange = (event)=>{\r\n  //   setSetSearchField( event.target.value);\r\n  //   console.log(event.target.value);\r\n  // }\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    props.onRequestRobots();\r\n  }, []);\r\n  const robots = props.robots;\r\n  const filtering = robots.filter(robot =>{\r\n  return robot.name.toLowerCase().includes(props.searchField)\r\n})\r\n  // console.log(filtering);\r\n  return (\r\n    <div className=\"tc\">\r\n    <h1 className=\"f1\">KITTENFRIENDS</h1>\r\n    <SearchBox searchChange={props.onSearchChange} />\r\n    <Scroll>\r\n    <ErrorBoundary>\r\n    < CardList robots={filtering}/>\r\n    </ErrorBoundary>\r\n    </Scroll>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAIL,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS\r\n} from './constans'\r\n\r\n\r\nexport const setsearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n  dispatch({type:REQUEST_ROBOTS_PENDING})\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n  .then(response => response.json())\r\n  .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n  .catch(err => dispatch({type:REQUEST_ROBOTS_FAIL, payload:err}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING= 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL= 'REQUEST_ROBOTS_FAIL';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAIL,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS\r\n} from './constans'\r\n\r\nconst initialState = {\r\n  searchField :''\r\n}\r\nconst initialStateRequest = {\r\n  isPending :false,\r\n  robots:[],\r\n  error:''\r\n}\r\nexport const searchRobots = (state = initialState, action={}) =>{\r\nswitch(action.type){\r\n  case CHANGE_SEARCH_FIELD:\r\n    return Object.assign({},state, {searchField:action.payload})\r\n  default:\r\n  return state;\r\n}\r\n}\r\nexport const requestRobots = (state = initialStateRequest, action ={})=>{\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({},state, {isPending:true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({},state, {robots:action.payload, isPending:false})\r\n    case REQUEST_ROBOTS_FAIL:\r\n      return  Object.assign({},state, {error:action.payload, isPending:false})\r\n    default:\r\n    return state\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './Containers/App2';\nimport App from './Containers/App3_redux';\n// import Comp from './Component1'\n// import Card from './Card'\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport {Provider  } from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers } from 'redux'\nimport {searchRobots, requestRobots} from './reducers'\nimport {createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n// Redux \" store part \"\n// get a reducer inside the store\n// collecting reducers in an Object\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst logger = createLogger();\n// order matter here\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n// pass the provider the store so it will be the holder of the big picture\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}